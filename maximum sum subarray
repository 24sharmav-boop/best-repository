def max_sum_subarray_under_constraint(arr, constraint):
    def helper(left, right):
        if left > right:
            return float('-inf'), []

        if left == right:
            if arr[left] <= constraint:
                return arr[left], [arr[left]]
            else:
                return float('-inf'), []

        mid = (left + right) // 2
        left_sum, left_sub = helper(left, mid)
        right_sum, right_sub = helper(mid + 1, right)

        max_left_sum = float('-inf')
        temp_sum = 0
        cross_left_idx = mid

        for i in range(mid, left - 1, -1):
            temp_sum += arr[i]
            if temp_sum > max_left_sum:
                max_left_sum = temp_sum
                cross_left_idx = i

        max_right_sum = float('-inf')
        temp_sum = 0
        cross_right_idx = mid + 1

        for j in range(mid + 1, right + 1):
            temp_sum += arr[j]
            if temp_sum > max_right_sum:
                max_right_sum = temp_sum
                cross_right_idx = j

        cross_sum = max_left_sum + max_right_sum
        if cross_sum <= constraint:
            cross_sub = arr[cross_left_idx:cross_right_idx + 1]
        else:
            cross_sum = float('-inf')
            cross_sub = []

        candidates = [
            (left_sum, left_sub),
            (right_sum, right_sub),
            (cross_sum, cross_sub)
        ]

        valid = [(s, sub) for s, sub in candidates if s <= constraint]

        if not valid:
            return float('-inf'), []

        return max(valid, key=lambda x: x[0])

    max_sum, subarray = helper(0, len(arr) - 1)
    if max_sum == float('-inf'):
        return 0, []
    return max_sum, subarray
    arr = [4, -2, 3, -1, 5]
    constraint = 7
    max_sum, subarray = max_sum_subarray_under_constraint(arr, constraint)
    print("Max sum:", max_sum)
    print("Subarray:", subarray)
